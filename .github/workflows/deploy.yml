name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build and QA"]
    types: [completed]
    branches: [master]

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    needs: [build-and-qa]
    
    outputs:
      image_digest: ${{ steps.image-ref.outputs.image_ref }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get image reference
        id: image-ref
        run: |
          # Get the image digest from the build job
          IMAGE_REF="${{ needs.build-and-qa.outputs.image_digest }}"
          
          # Fallback to using the latest tag if digest is not available
          if [ -z "$IMAGE_REF" ]; then
            echo "Warning: Could not get image digest from build job, falling back to latest tag"
            IMAGE_REF="ghcr.io/${{ github.repository }}:latest"
          fi
          
          echo "Using image reference: $IMAGE_REF"
          echo "image_ref=$IMAGE_REF" >> $GITHUB_OUTPUT

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/projects/hosting/
            
            # Get the image reference from previous step
            IMAGE_REF="${{ steps.image-ref.outputs.image_ref }}"
            
            # Pull the latest image
            echo "Pulling the latest Docker image..."
            echo "Using image reference: $IMAGE_REF"
            
            # Login to GitHub Container Registry if using ghcr.io
            if [[ $IMAGE_REF == ghcr.io/* ]]; then
              echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            fi
            
            docker pull $IMAGE_REF
            
            # Stop and remove the existing container if it's running
            if docker ps -a --format '{{.Names}}' | grep -q '^kiddo$'; then
              echo "Stopping and removing existing container..."
              docker stop kiddo || true
              docker rm kiddo || true
            fi
            
            # Run the new container with the updated image
            echo "Starting new container..."
            docker run -d \
              --name kiddo \
              --restart unless-stopped \
              -p 80:80 \
              -v /path/to/your/.env:/app/.env \
              -v /path/to/your/var:/app/var \
              $IMAGE_REF
            
            # Wait for the container to be ready
            echo "Waiting for container to be ready..."
            sleep 10
            
            # Run database migrations
            echo "Running database migrations..."
            docker exec kiddo php bin/console doctrine:schema:update --force --no-interaction
            
            echo "Deployment completed successfully!"
