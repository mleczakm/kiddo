name: Build and QA

on:
  push:
    branches:
      - master
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-qa:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      APP_VERSION: "$(date +'%Y-%m-%d-%H%M')"

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long

      # Build and cache development image
      - name: Build and cache development image
        id: build-dev
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php/Dockerfile
          target: dev
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-cache
          cache-to: ${{ github.event_name == 'push' && format('type=registry,ref={0}/{1}:dev-cache,mode=max', env.REGISTRY, env.IMAGE_NAME) || '' }}
          load: true

      # Run Composer Static Analysis script against the development image
      - name: Run Composer SA
        run: docker run --rm ${{ steps.meta.outputs.tags }} composer sa


      - name: Get GitHub Actions Docker network name
        id: network
        run: |
            echo "NETWORK_NAME=$(docker network ls --filter name=github --format '{{.Name}}')" >> $GITHUB_ENV

      # Run all tests
      - name: Run Tests
        run: docker run --rm --network $NETWORK_NAME ${{ steps.meta.outputs.tags }} composer tests
        env:
          DATABASE_URL: "sqlite:///%kernel.project_dir%/var/app_test.db"

      - name: Extract production metadata
        if: success()
        id: meta-prod
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=long

      # Build and push production image if QA passes (only on push to main)
      - name: Build and push production image
        if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
        id: build-prod
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$APP_VERSION
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
          build-args: |
            APP_VERSION=${{ env.APP_VERSION }}
            APP_REVISION=${{ github.sha }}

      # Output the image digest for the deployment workflow
      - name: Output image digest
        if: success()
        id: image-digest
        run: |
          # Get the full image reference with digest
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}"
          echo "image_digest=$IMAGE_REF" >> $GITHUB_OUTPUT
          echo "Image reference: $IMAGE_REF"
